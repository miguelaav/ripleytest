{"ast":null,"code":"var _jsxFileName = \"/Users/miguelacevedo/Projects/ripleytest/ripleyapp/src/ApiCall/ApiCall.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nconst URL = 'ws://limitless-tor-39189.herokuapp.com';\n\nclass ApiCall extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket(URL);\n    this.state = {\n      temperature: null,\n      time: null,\n      zone: null\n    };\n  }\n\n  async loadConstruction(id) {\n    const results = (await axios.get('https://limitless-tor-39189.herokuapp.com/' + id)).data;\n    this.setState({\n      temperature: results.body.currently.temperature,\n      time: this.convertTimestamp(results.body.currently.time),\n      zone: results.body.timezone\n    });\n    this.submitMessage(id);\n  }\n\n  convertTimestamp(tim) {\n    var timestampField = tim;\n    var timestampValue = parseInt(timestampField);\n    var dt = new Date(timestampValue * 1000);\n    return dt.toUTCString();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      const id = nextProps.match.params.id;\n      this.loadConstruction(id);\n    }\n  }\n\n  componentDidMount() {\n    const params = this.props.match.params;\n    const ids = params.id;\n\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected to ws');\n    };\n\n    this.loadConstruction(ids);\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data);\n      console.log(evt.data); //this.addMessage(message)\n\n      this.setState({\n        temperature: message.temperature,\n        time: this.convertTimestamp(message.time)\n      });\n    };\n  }\n\n  submitMessage(message) {\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.ws.send(message), 10000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.results === null && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Please first select a country zone...\"), React.createElement(\"div\", {\n      className: \"card text-white bg-success mb-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Temperatura y hora\"), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"card-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.state.zone), React.createElement(\"p\", {\n      className: \"card-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Temperatura: \", this.state.temperature, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), this.state.time, \"   \")))));\n  }\n\n}\n\nexport default ApiCall;","map":{"version":3,"sources":["/Users/miguelacevedo/Projects/ripleytest/ripleyapp/src/ApiCall/ApiCall.js"],"names":["React","Component","Link","axios","URL","ApiCall","constructor","props","ws","WebSocket","state","temperature","time","zone","loadConstruction","id","results","get","data","setState","body","currently","convertTimestamp","timezone","submitMessage","tim","timestampField","timestampValue","parseInt","dt","Date","toUTCString","componentWillReceiveProps","nextProps","match","params","componentDidMount","ids","onopen","console","log","onclose","onmessage","evt","message","JSON","parse","clearInterval","interval","setInterval","send","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,wCAAZ;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC9BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAUnBC,EAVmB,GAUd,IAAIC,SAAJ,CAAcL,GAAd,CAVc;AAGjB,SAAKM,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,IADF;AAEXC,MAAAA,IAAI,EAAC,IAFM;AAGXC,MAAAA,IAAI,EAAC;AAHM,KAAb;AAKD;;AAID,QAAMC,gBAAN,CAAwBC,EAAxB,EAA6B;AAE3B,UAAMC,OAAO,GAAG,CAAC,MAAMb,KAAK,CAACc,GAAN,CAAU,+CAA6CF,EAAvD,CAAP,EAAmEG,IAAnF;AACA,SAAKC,QAAL,CAAc;AACVR,MAAAA,WAAW,EAAGK,OAAO,CAACI,IAAR,CAAaC,SAAb,CAAuBV,WAD3B;AAEVC,MAAAA,IAAI,EAAG,KAAKU,gBAAL,CAAsBN,OAAO,CAACI,IAAR,CAAaC,SAAb,CAAuBT,IAA7C,CAFG;AAGVC,MAAAA,IAAI,EAAGG,OAAO,CAACI,IAAR,CAAaG;AAHV,KAAd;AAKA,SAAKC,aAAL,CAAmBT,EAAnB;AACD;;AAEDO,EAAAA,gBAAgB,CAACG,GAAD,EAAM;AACpB,QAAIC,cAAc,GAAGD,GAArB;AACA,QAAIE,cAAc,GAAGC,QAAQ,CAACF,cAAD,CAA7B;AAEE,QAAIG,EAAE,GAAG,IAAIC,IAAJ,CAASH,cAAc,GAAC,IAAxB,CAAT;AACA,WAAOE,EAAE,CAACE,WAAH,EAAP;AAGH;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AAEnC,QAAIA,SAAS,CAACC,KAAV,CAAgBC,MAAhB,CAAuBpB,EAAvB,KAA8B,KAAKR,KAAL,CAAW2B,KAAX,CAAiBC,MAAjB,CAAwBpB,EAA1D,EAA8D;AAC5D,YAAMA,EAAE,GAAGkB,SAAS,CAACC,KAAV,CAAgBC,MAAhB,CAAuBpB,EAAlC;AACA,WAAKD,gBAAL,CAAuBC,EAAvB;AACD;AACF;;AAEDqB,EAAAA,iBAAiB,GAAG;AAAA,UACCD,MADD,GACc,KAAK5B,KADnB,CACR2B,KADQ,CACCC,MADD;AAEhB,UAAME,GAAG,GAAGF,MAAM,CAACpB,EAAnB;;AACA,SAAKP,EAAL,CAAQ8B,MAAR,GAAiB,MAAM;AACrB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,KAHD;;AAKA,SAAK1B,gBAAL,CAAsBuB,GAAtB;;AAEA,SAAK7B,EAAL,CAAQiC,OAAR,GAAkB,MAAM;AACtBF,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADsB,CAEtB;;AACA,WAAKrB,QAAL,CAAc;AACZX,QAAAA,EAAE,EAAE,IAAIC,SAAJ,CAAcL,GAAd;AADQ,OAAd;AAGD,KAND;;AAOA,SAAKI,EAAL,CAAQkC,SAAR,GAAoBC,GAAG,IAAI;AACzB;AACA,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACzB,IAAf,CAAhB;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACzB,IAAhB,EAHyB,CAIzB;;AACA,WAAKC,QAAL,CAAc;AACZR,QAAAA,WAAW,EAAGiC,OAAO,CAACjC,WADV;AAEZC,QAAAA,IAAI,EAAG,KAAKU,gBAAL,CAAsBsB,OAAO,CAAChC,IAA9B;AAFK,OAAd;AAOH,KAZC;AAcH;;AAEDY,EAAAA,aAAa,CAACoB,OAAD,EAAU;AACrBG,IAAAA,aAAa,CAAC,KAAKC,QAAN,CAAb;AACA,SAAKA,QAAL,GAAgBC,WAAW,CAAC,MAC1B,KAAKzC,EAAL,CAAQ0C,IAAR,CAAaN,OAAb,CADyB,EAEzB,KAFyB,CAA3B;AAID;;AAEDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAKzC,KAAL,CAAWM,OAAX,KAAuB,IAAvB,IAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAFhC,EAGA;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAKN,KAAL,CAAWG,IAAvC,CADJ,EAEI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAuC,KAAKH,KAAL,CAAWC,WAAlD,OAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/D,EAC2B,KAAKD,KAAL,CAAWE,IADtC,QAFJ,CAFF,CAHA,CADF,CADF;AAkBD;;AAtG6B;;AA8GhC,eAAeP,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport axios from 'axios';\n\nconst URL = 'ws://limitless-tor-39189.herokuapp.com'\n\nclass ApiCall extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temperature: null,\n      time:null,\n      zone:null,\n    };\n  }\n\n  ws = new WebSocket(URL)\n\n  async loadConstruction( id ) {\n    \n    const results = (await axios.get('https://limitless-tor-39189.herokuapp.com/'+id)).data;\n    this.setState({\n        temperature : results.body.currently.temperature,\n        time : this.convertTimestamp(results.body.currently.time),\n        zone : results.body.timezone,\n    });\n    this.submitMessage(id);\n  }\n\n  convertTimestamp(tim) {\n    var timestampField = tim;\n    var timestampValue = parseInt(timestampField);\n\n      var dt = new Date(timestampValue*1000);\n      return dt.toUTCString();\n\n    \n  }\n\n  componentWillReceiveProps(nextProps) {\n    \n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      const id = nextProps.match.params.id\n      this.loadConstruction( id );\n    }\n  }\n\n  componentDidMount() {\n      const { match: { params } } = this.props;\n      const ids = params.id;\n      this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected to ws')        \n      }\n\n      this.loadConstruction(ids)\n      \n      this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n        this.setState({\n          ws: new WebSocket(URL),\n        })\n      }\n      this.ws.onmessage = evt => {\n        // on receiving a message, add it to the list of messages\n        const message = JSON.parse(evt.data);\n        console.log(evt.data)\n        //this.addMessage(message)\n        this.setState({\n          temperature : message.temperature,\n          time : this.convertTimestamp(message.time),\n        });\n        \n     \n\n    }\n    \n  }\n\n  submitMessage(message) {\n    clearInterval(this.interval);\n    this.interval = setInterval(() => \n      this.ws.send(message)\n    , 10000);\n    \n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n    \n        {this.state.results === null && <p>Please first select a country zone...</p>}\n        <div className=\"card text-white bg-success mb-12\">\n          <div className=\"card-header\">Temperatura y hora</div>\n          <div className=\"card-body\">\n              <h4 className=\"card-title\">{this.state.zone}</h4>\n              <p className=\"card-text\">Temperatura: {this.state.temperature} <br></br>\n                                        {this.state.time}   </p>\n            \n            </div>\n            \n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  \n}\n\n\n\n\nexport default ApiCall;"]},"metadata":{},"sourceType":"module"}